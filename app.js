// server/index.js (ou app.js, le fichier principal de votre backend)

require('dotenv').config(); // Charge les variables d'environnement depuis le fichier .env

// Importation des modules n√©cessaires
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const http = require('http'); // NOUVEAU: Importe le module HTTP de Node.js pour Socket.IO
const { Server } = require("socket.io"); // NOUVEAU: Importe la classe Server de socket.io

// Importation de vos routes API existantes
const authRoutes = require('./routes/authRoutes');
const subjectsRoutes = require('./routes/subjects');
const dashboardRoutes = require('./routes/dashboardRoutes'); // Assurez-vous que cette route existe si elle est utilis√©e

// NOUVEAU: Importe le mod√®le de Message pour le chat
const Message = require('./models/Message'); // Assurez-vous que ce chemin est correct (ex: ./models/Message.js)

// Initialisation de l'application Express
const app = express();
const server = http.createServer(app); // NOUVEAU: Cr√©e un serveur HTTP √† partir de votre application Express pour Socket.IO

// Configure le port d'√©coute (Vercel g√©rera cela, mais bon pour le local)
const PORT = process.env.PORT || 3000;

// Configuration CORS pour Express et Socket.IO
// IMPORTANT : Mettez l'URL de votre frontend d√©ploy√© sur Vercel ici.
const allowedOrigins = [
  "http://localhost:8100", // Votre frontend Ionic en d√©veloppement
  "https://votre-frontend-soutiens-moi.vercel.app" // <--- TR√àS IMPORTANT : REMPLACEZ CECI PAR L'URL R√âELLE DE VOTRE FRONTEND D√âPLOY√â
];

// Middleware Express CORS
app.use(cors({
  origin: allowedOrigins,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'], // OPTIONS est important pour les requ√™tes preflight CORS
  allowedHeaders: ['Content-Type', 'Authorization'], // 'Content-Type' et 'Authorization' sont essentiels
  credentials: true // Permet l'envoi de cookies d'authentification ou d'en-t√™tes
}));

// Middleware pour parser les requ√™tes au format JSON.
app.use(express.json());

// Middleware pour parser les requ√™tes URL-encoded (utile pour les formulaires web).
app.use(express.urlencoded({ extended: true }));

// Connexion √† la base de donn√©es MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('‚úÖ Connect√© √† MongoDB Atlas')) // Message de succ√®s
  .catch(err => console.error('‚ùå Erreur de connexion MongoDB :', err));

// Initialisation de Socket.IO et configuration CORS pour Socket.IO
const io = new Server(server, { // NOUVEAU: Attache Socket.IO au serveur HTTP
    cors: {
        origin: allowedOrigins, // Applique les m√™mes origines CORS pour Socket.IO
        methods: ["GET", "POST"]
    }
});

// D√©finition des Routes API Express (vos routes existantes)
app.use('/api/auth', authRoutes);
app.use('/api/subjects', subjectsRoutes);
app.use('/api/dashboard', dashboardRoutes); // Utilisation de la route dashboard

// NOUVELLE ROUTE API REST POUR R√âCUP√âRER L'HISTORIQUE DU CHAT
app.get('/api/messages', async (req, res) => {
    try {
        // Pour un chat simple et g√©n√©ral, on r√©cup√®re les 100 derniers messages tri√©s par date.
        // Pour un chat priv√©, cette route devrait √™tre adapt√©e pour filtrer
        // les messages entre deux utilisateurs sp√©cifiques (par exemple, via des query params: req.query.user1Id, req.query.user2Id)
        const messages = await Message.find().sort({ timestamp: 1 }).limit(100); // R√©cup√®re les 100 derniers messages
        res.json(messages);
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des messages:', error);
        res.status(500).json({ message: 'Erreur serveur interne lors de la r√©cup√©ration des messages.' });
    }
});


// Logique Socket.IO pour la gestion du chat en temps r√©el
io.on('connection', (socket) => {
    console.log(`üí¨ Un utilisateur s'est connect√© via Socket.IO : ${socket.id}`);

    // √âcoute l'√©v√©nement 'chat message' envoy√© par le client
    socket.on('chat message', async (msg) => {
        console.log('üì¨ Message re√ßu du client :', msg);
        try {
            // Sauvegarde le message en base de donn√©es
            const newMessage = new Message({
                text: msg.text,
                sender: msg.sender,
                // Si vous avez un chat priv√©, vous ajouteriez ici un champ recipient: msg.recipient
                timestamp: new Date() // S'assurer que le timestamp est d√©fini par le serveur
            });
            await newMessage.save(); // Sauvegarde le message
            console.log('üíæ Message sauvegard√© :', newMessage);

            // √âmet le message √† TOUS les clients connect√©s via Socket.IO
            // Pour un chat priv√©, vous devriez g√©rer des "rooms" ou √©mettre uniquement
            // aux sockets des utilisateurs concern√©s (ex: io.to(roomName).emit('chat message', newMessage);)
            io.emit('chat message', { // Renvoie le message complet, y compris l'ID g√©n√©r√© par MongoDB
                _id: newMessage._id,
                text: newMessage.text,
                sender: newMessage.sender,
                // recipient: newMessage.recipient, // √Ä inclure si vous avez un champ recipient dans votre mod√®le Message
                timestamp: newMessage.timestamp
            });
        } catch (error) {
            console.error('‚ùå Erreur lors de la sauvegarde ou de l\'√©mission du message Socket.IO :', error);
        }
    });

    // G√®re la d√©connexion d'un utilisateur
    socket.on('disconnect', () => {
        console.log(`üëã L'utilisateur ${socket.id} s'est d√©connect√© du chat.`);
    });
});

// Route de test simple pour v√©rifier que l'API est accessible
app.get('/', (req, res) => {
  res.status(200).send('üöÄ API Backend fonctionne ! Bienvenue sur Soutiens-Moi.');
});

// Export de l'application Express ET du serveur HTTP pour Vercel
// Vercel utilisera `module.exports` pour d√©marrer votre fonction de handler.
// Pour Socket.IO, Vercel recommande d'exporter le serveur http.
module.exports = server; // NOUVEAU: Exportez le serveur HTTP qui englobe Express et Socket.IO

// La section `app.listen` n'est plus n√©cessaire pour le d√©ploiement Vercel car `module.exports = server;` g√®re cela.
// Pour le d√©veloppement local, vous pouvez d√©commenter la ligne suivante :
/*
server.listen(PORT, () => {
  console.log(`Serveur backend (Express & Socket.IO) d√©marr√© sur le port ${PORT}`);
});
*/